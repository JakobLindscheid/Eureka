[2024-10-06 10:52:49,158][root][INFO] - Workspace: /home/vandriel/Documents/GitHub/Eureka/eureka/outputs/eureka/2024-10-06_10-52-49
[2024-10-06 10:52:49,158][root][INFO] - Project Root: /home/vandriel/Documents/GitHub/Eureka/eureka
[2024-10-06 10:52:49,158][root][INFO] - Using LLM: gpt-4o-mini
[2024-10-06 10:52:49,158][root][INFO] - Task: Humanoid
[2024-10-06 10:52:49,158][root][INFO] - Task description: to make the humanoid run as fast as possible
[2024-10-06 10:52:49,173][root][INFO] - Iteration 0: Generating 5 samples with gpt-4o-mini
[2024-10-06 10:52:52,943][httpx][INFO] - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
[2024-10-06 10:52:56,001][httpx][INFO] - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
[2024-10-06 10:52:56,004][root][INFO] - Iteration 0: Prompt Tokens: 1110, Completion Tokens: 1841, Total Tokens: 4061
[2024-10-06 10:52:56,004][root][INFO] - Iteration 0: Processing Code Run 0
[2024-10-06 10:53:00,922][root][INFO] - Iteration 0: Code Run 0 execution error!
[2024-10-06 10:53:01,536][root][INFO] - Iteration 0: Processing Code Run 1
[2024-10-06 10:53:06,398][root][INFO] - Iteration 0: Code Run 1 execution error!
[2024-10-06 10:53:06,994][root][INFO] - Iteration 0: Processing Code Run 2
[2024-10-06 10:53:11,918][root][INFO] - Iteration 0: Code Run 2 execution error!
[2024-10-06 10:53:12,530][root][INFO] - Iteration 0: Processing Code Run 3
[2024-10-06 10:53:17,367][root][INFO] - Iteration 0: Code Run 3 execution error!
[2024-10-06 10:53:17,964][root][INFO] - Iteration 0: Processing Code Run 4
[2024-10-06 10:53:23,832][root][INFO] - Iteration 0: Code Run 4 successfully training!
[2024-10-06 11:02:23,948][tensorboard][INFO] - No path found after /home/vandriel/Documents/GitHub/Eureka/eureka/outputs/eureka/2024-10-06_10-52-49/policy-2024-10-06_10-53-20/runs/HumanoidDS-2024-10-06_10-53-20/summaries/events.out.tfevents.1728204801.Rhino
[2024-10-06 11:02:23,952][root][INFO] - Iteration 0: Max Success: 0.158203125, Execute Rate: 0.2, Max Success Reward Correlation: 0.8207555563810544
[2024-10-06 11:02:23,952][root][INFO] - Iteration 0: Best Generation ID: 4
[2024-10-06 11:02:23,952][root][INFO] - Iteration 0: GPT Output Content:
```python
import torch
from typing import Tuple, Dict

@torch.jit.script
def compute_reward(root_states: torch.Tensor, dof_vel: torch.Tensor) -> Tuple[torch.Tensor, Dict[str, torch.Tensor]]:
    # Temperature parameters for normalization
    velocity_temp = 1.0

    # Extract the torso velocity (x, y, z components)
    torso_velocity = root_states[:, 7:10]  # Shape: (N, 3)
    
    # Calculate the speed of the torso (magnitude of the velocity vector)
    speed = torch.norm(torso_velocity, p=2, dim=-1)  # Shape: (N,)

    # Reward is based on the speed, we normalize it using the exponential function
    reward = torch.exp(speed / velocity_temp)  # Reward becomes larger for higher speeds
    
    # Create individual reward components for monitoring
    reward_components = {
        'speed': speed,
    }
    
    return reward.sum(), reward_components  # Return total reward and individual components
```

[2024-10-06 11:02:23,952][root][INFO] - Iteration 0: User Content:
We trained a RL policy using the provided reward function code and tracked the values of the individual components in the reward function as well as global policy metrics such as success rates and episode lengths after every 100 epochs and the maximum, mean, minimum values encountered:
speed: ['1.32', '0.85', '0.35', '0.32', '0.30', '0.29', '0.26', '0.24', '0.24', '0.24'], Max: 1.51, Mean: 0.38, Min: 0.22 
task_score: ['-0.05', '-0.00', '-0.05', '-0.02', '-0.01', '-0.01', '0.00', '0.00', '0.01', '0.01'], Max: 0.16, Mean: -0.00, Min: -0.05 
episode_lengths: ['31.92', '93.38', '954.63', '979.22', '958.89', '954.98', '971.87', '974.82', '943.45', '947.92'], Max: 991.68, Mean: 823.98, Min: 25.11 
Please carefully analyze the policy feedback and provide a new, improved reward function that can better solve the task. Some helpful tips for analyzing the policy feedback:
    (1) If the success rates are always near zero, then you must rewrite the entire reward function
    (2) If the values for a certain reward component are near identical throughout, then this means RL is not able to optimize this component as it is written. You may consider
        (a) Changing its scale or the value of its temperature parameter
        (b) Re-writing the reward component 
        (c) Discarding the reward component
    (3) If some reward components' magnitude is significantly larger, then you must re-scale its value to a proper range
Please analyze each existing reward component in the suggested manner above first, and then write the reward function code. The output of the reward function should consist of two items:
    (1) the total reward,
    (2) a dictionary of each individual reward component.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the reward function code:
    (1) You may find it helpful to normalize the reward to a fixed range by applying transformations like torch.exp to the overall reward or its components
    (2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
    (3) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as torch.Tensor
    (4) Most importantly, the reward code's input variables must contain only attributes of the provided environment class definition (namely, variables that have prefix self.). Under no circumstance can you introduce new input variables.


[2024-10-06 11:02:24,198][root][INFO] - Iteration 1: Generating 5 samples with gpt-4o-mini
[2024-10-06 11:02:35,171][httpx][INFO] - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
[2024-10-06 11:02:45,941][httpx][INFO] - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
[2024-10-06 11:02:46,136][root][INFO] - Iteration 1: Prompt Tokens: 1999, Completion Tokens: 5314, Total Tokens: 9312
[2024-10-06 11:02:46,136][root][INFO] - Iteration 1: Processing Code Run 0
[2024-10-06 11:02:48,820][root][INFO] - Iteration 1: Code Run 0 execution error!
[2024-10-06 11:02:49,170][root][INFO] - Iteration 1: Processing Code Run 1
[2024-10-06 11:02:54,924][root][INFO] - Iteration 1: Code Run 1 successfully training!
[2024-10-06 11:11:33,941][root][INFO] - Iteration 1: Processing Code Run 2
[2024-10-06 11:11:36,626][root][INFO] - Iteration 1: Code Run 2 execution error!
[2024-10-06 11:11:36,975][root][INFO] - Iteration 1: Processing Code Run 3
[2024-10-06 11:11:42,828][root][INFO] - Iteration 1: Code Run 3 successfully training!
[2024-10-06 11:20:49,476][root][INFO] - Iteration 1: Processing Code Run 4
[2024-10-06 11:20:55,291][root][INFO] - Iteration 1: Code Run 4 successfully training!
[2024-10-06 11:30:13,905][tensorboard][INFO] - No path found after /home/vandriel/Documents/GitHub/Eureka/eureka/outputs/eureka/2024-10-06_10-52-49/policy-2024-10-06_11-02-51/runs/HumanoidDS-2024-10-06_11-02-51/summaries/events.out.tfevents.1728205372.Rhino
[2024-10-06 11:30:14,422][tensorboard][INFO] - No path found after /home/vandriel/Documents/GitHub/Eureka/eureka/outputs/eureka/2024-10-06_10-52-49/policy-2024-10-06_11-11-39/runs/HumanoidDS-2024-10-06_11-11-39/summaries/events.out.tfevents.1728205900.Rhino
[2024-10-06 11:30:14,893][tensorboard][INFO] - No path found after /home/vandriel/Documents/GitHub/Eureka/eureka/outputs/eureka/2024-10-06_10-52-49/policy-2024-10-06_11-20-51/runs/HumanoidDS-2024-10-06_11-20-52/summaries/events.out.tfevents.1728206453.Rhino
[2024-10-06 11:30:14,897][root][INFO] - Iteration 1: Max Success: 0.4448356628417969, Execute Rate: 0.6, Max Success Reward Correlation: 0.5829885898618787
[2024-10-06 11:30:14,897][root][INFO] - Iteration 1: Best Generation ID: 3
[2024-10-06 11:30:14,897][root][INFO] - Iteration 1: GPT Output Content:
Given the feedback from the existing reward components, let's analyze each component and then provide an improved reward function.

### Analysis of Existing Components:

1. **Speed**:
   - The values recorded for speed range from 0.22 to 1.51, indicating there's some variation, but the mean is low (0.38), suggesting that the agent isnâ€™t consistently running fast. This indicates the RL agent is not able to optimize for maximum speed effectively.
   - The reward for speed is heavily reliant on a velocity term that didn't lead to successful rate improvements.
   - **Recommendation**: Modify the scaling and potentially add a higher weight to incentivize faster speed.

2. **Task Score**:
   - The task score is close to zero with minimal variation, which suggests that the component isn't effectively informing the agent about its performance relative to the task.
   - **Recommendation**: Improve its formulation or integrate it more tightly with the speed to provide more informative feedback.
   
3. **Episode Lengths**:
   - The episode lengths show substantial variation and high mean values, indicating diversity in the run times. However, it does not directly contribute to the feedback during training.
   - **Recommendation**: Utilize episode lengths differently to promote running longer distances instead of merely surviving longer.

### New Reward Function Design

Based on the analysis, I will rewrite the reward function to:
- Put more emphasis on speed.
- Incorporate penalties for slow or negative task scores more directly.
- Add length as a component that rewards the distance towards the target.

Here's the new reward function code:

```python
import torch
from typing import Tuple, Dict

@torch.jit.script
def compute_reward(root_states: torch.Tensor, dof_vel: torch.Tensor, targets: torch.Tensor) -> Tuple[torch.Tensor, Dict[str, torch.Tensor]]:
    # Temperature parameters for normalization
    speed_temp = 0.5
    task_score_temp = 0.1

    # Extract the torso velocity (x, y, z components)
    torso_velocity = root_states[:, 7:10]  # Shape: (N, 3)
    
    # Calculate the speed of the torso (magnitude of the velocity vector)
    speed = torch.norm(torso_velocity, p=2, dim=-1)  # Shape: (N,)

    # Reward based on speed with normalization
    speed_reward = torch.exp(speed / speed_temp)

    # Compute task score as the negative distance to the target
    torso_position = root_states[:, 0:3]  # Extract torso position
    to_target = targets - torso_position
    task_score = -torch.norm(to_target, p=2, dim=-1)  # Shape: (N,)
    
    # Normalizing the task score
    task_score_reward = torch.exp(task_score / task_score_temp)

    # Overall reward combines speed and task score rewards
    total_reward = speed_reward + task_score_reward  # Encourages speed as well as proximity to target

    # Create individual reward components for monitoring
    reward_components = {
        'speed': speed,
        'task_score': task_score,
    }
    
    return total_reward.sum(), reward_components  # Return total reward and individual components
``` 

### Key Improvements:
- Increased emphasis on speed by adding an exponential normalization.
- Refined task scoring that directly affects reward based on distance to the target.
- Combined overall rewards to give the agent a clearer understanding of the performance based on speed and successful navigation towards goals.

[2024-10-06 11:30:14,897][root][INFO] - Iteration 1: User Content:
We trained a RL policy using the provided reward function code and tracked the values of the individual components in the reward function as well as global policy metrics such as success rates and episode lengths after every 100 epochs and the maximum, mean, minimum values encountered:
speed: ['1.32', '0.90', '0.78', '0.67', '0.66', '0.71', '0.80', '0.82', '0.94', '0.97'], Max: 1.51, Mean: 0.82, Min: 0.59 
task_score: ['-1000.01', '-999.90', '-998.35', '-997.91', '-998.27', '-998.33', '-999.24', '-1001.09', '-999.00', '-996.65'], Max: -996.28, Mean: -998.80, Min: -1001.15 
task_score: ['-0.05', '0.04', '0.18', '0.17', '0.14', '0.10', '0.02', '-0.19', '-0.08', '0.24'], Max: 0.44, Mean: 0.07, Min: -0.26 
episode_lengths: ['31.92', '118.13', '915.40', '927.74', '949.90', '952.11', '980.37', '945.41', '939.52', '959.86'], Max: 992.51, Mean: 819.42, Min: 25.12 
Please carefully analyze the policy feedback and provide a new, improved reward function that can better solve the task. Some helpful tips for analyzing the policy feedback:
    (1) If the success rates are always near zero, then you must rewrite the entire reward function
    (2) If the values for a certain reward component are near identical throughout, then this means RL is not able to optimize this component as it is written. You may consider
        (a) Changing its scale or the value of its temperature parameter
        (b) Re-writing the reward component 
        (c) Discarding the reward component
    (3) If some reward components' magnitude is significantly larger, then you must re-scale its value to a proper range
Please analyze each existing reward component in the suggested manner above first, and then write the reward function code. The output of the reward function should consist of two items:
    (1) the total reward,
    (2) a dictionary of each individual reward component.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the reward function code:
    (1) You may find it helpful to normalize the reward to a fixed range by applying transformations like torch.exp to the overall reward or its components
    (2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
    (3) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as torch.Tensor
    (4) Most importantly, the reward code's input variables must contain only attributes of the provided environment class definition (namely, variables that have prefix self.). Under no circumstance can you introduce new input variables.


[2024-10-06 11:30:15,023][root][INFO] - Iteration 2: Generating 5 samples with gpt-4o-mini
[2024-10-06 11:30:26,871][httpx][INFO] - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
[2024-10-06 11:30:40,764][httpx][INFO] - HTTP Request: POST https://api.openai.com/v1/chat/completions "HTTP/1.1 200 OK"
[2024-10-06 11:30:41,044][root][INFO] - Iteration 2: Prompt Tokens: 2579, Completion Tokens: 7178, Total Tokens: 12336
[2024-10-06 11:30:41,044][root][INFO] - Iteration 2: Processing Code Run 0
[2024-10-06 11:30:46,798][root][INFO] - Iteration 2: Code Run 0 successfully training!
[2024-10-06 11:39:58,800][root][INFO] - Iteration 2: Processing Code Run 1
[2024-10-06 11:40:04,625][root][INFO] - Iteration 2: Code Run 1 successfully training!
[2024-10-06 11:49:14,860][root][INFO] - Iteration 2: Processing Code Run 2
[2024-10-06 11:49:17,498][root][INFO] - Iteration 2: Code Run 2 execution error!
[2024-10-06 11:49:17,867][root][INFO] - Iteration 2: Processing Code Run 3
[2024-10-06 11:49:23,619][root][INFO] - Iteration 2: Code Run 3 successfully training!
[2024-10-06 11:58:00,544][root][INFO] - Iteration 2: Processing Code Run 4
[2024-10-06 11:58:06,339][root][INFO] - Iteration 2: Code Run 4 successfully training!
[2024-10-06 12:07:12,500][tensorboard][INFO] - No path found after /home/vandriel/Documents/GitHub/Eureka/eureka/outputs/eureka/2024-10-06_10-52-49/policy-2024-10-06_11-30-43/runs/HumanoidDS-2024-10-06_11-30-43/summaries/events.out.tfevents.1728207044.Rhino
[2024-10-06 12:07:13,039][tensorboard][INFO] - No path found after /home/vandriel/Documents/GitHub/Eureka/eureka/outputs/eureka/2024-10-06_10-52-49/policy-2024-10-06_11-40-01/runs/HumanoidDS-2024-10-06_11-40-01/summaries/events.out.tfevents.1728207602.Rhino
[2024-10-06 12:07:13,548][tensorboard][INFO] - No path found after /home/vandriel/Documents/GitHub/Eureka/eureka/outputs/eureka/2024-10-06_10-52-49/policy-2024-10-06_11-49-20/runs/HumanoidDS-2024-10-06_11-49-20/summaries/events.out.tfevents.1728208161.Rhino
[2024-10-06 12:07:14,041][tensorboard][INFO] - No path found after /home/vandriel/Documents/GitHub/Eureka/eureka/outputs/eureka/2024-10-06_10-52-49/policy-2024-10-06_11-58-02/runs/HumanoidDS-2024-10-06_11-58-03/summaries/events.out.tfevents.1728208684.Rhino
[2024-10-06 12:07:14,045][root][INFO] - Iteration 2: Max Success: 0.2266702651977539, Execute Rate: 0.8, Max Success Reward Correlation: 0.7401744151404357
[2024-10-06 12:07:14,045][root][INFO] - Iteration 2: Best Generation ID: 0
[2024-10-06 12:07:14,045][root][INFO] - Iteration 2: GPT Output Content:
### Analysis of Policy Feedback

1. **Speed Reward Component**:
   - The values show some variation, with a Max of 1.51 and a Mean of 0.82. This indicates the agent can achieve speeds but potentially lacks the incentive to push further.
   - The minimum speed drops to 0.59, which suggests that the agent is experiencing instances of slow movement.
   - **Recommendation**: We might need to increase the temperature parameter to offer more variability or potentially reconsider how speed is rewarded to encourage even faster movement.

2. **Task Score Component**:
   - The task score values are very close in range, with a high negative value around -998, indicating that the agent is not making significant progress toward the target.
   - The lack of variance in this reward component indicates that the implementation may not effectively motivate desirable actions.
   - **Recommendation**: The current negative distance calculation isn't working well. Reworking and possibly changing how we calculate this score might be better.

3. **Overall Feedback**:
   - Success rates have been noted as near zero, indicating the policy does not effectively solve the task of running quickly toward the target.
   - Given the observations, it seems necessary to entirely rewrite the reward function to balance speed and position targeting more effectively.

### New Reward Function Design

Itâ€™s essential to create a more balanced reward that provides meaningful feedback for both speed and proximity to the target:

- **Speed Component**: Keep this rewarded, but possibly employ a squared function to encourage maximization even more.
- **Distance Component**: Instead of using negative distance, use a reward value that positively reinforces being closer to the target.
- **Combined Reward**: The combined reward should be more straightforwardly formulated to balance the two components effectively.

Here is the new reward function code:

```python
import torch
from typing import Tuple, Dict

@torch.jit.script
def compute_reward(root_states: torch.Tensor, dof_vel: torch.Tensor, targets: torch.Tensor) -> Tuple[torch.Tensor, Dict[str, torch.Tensor]]:
    # Temperature parameters for normalization
    speed_temp = 0.3  # Lower temperature to increase reward sensitivity
    distance_temp = 0.1
    
    # Extracting torso velocity (velocity of the humanoid)
    torso_velocity = root_states[:, 7:10]  # Shape: (N, 3)
    
    # Calculate speed (magnitude of the velocity)
    speed = torch.norm(torso_velocity, p=2, dim=-1)  # (N,)
    speed_reward = torch.exp(speed / speed_temp)  # Exponential to normalize speed
    
    # Calculate distance to target (as positive reward, shorter distance means better)
    torso_position = root_states[:, 0:3]  # Shape: (N, 3)
    to_target = targets - torso_position  # Target vector
    distance = torch.norm(to_target, p=2, dim=-1)  # (N,)
    
    # Reward based on distance (the smaller, the better)
    distance_reward = torch.exp(-distance / distance_temp)  # Exponentially incentivizing closeness to the target

    # Combined total reward 
    total_reward = speed_reward + distance_reward  # Encourages both speed and proximity

    # Create a dictionary to return individual components for analytics
    reward_components = {
        'speed_reward': speed_reward,
        'distance_reward': distance_reward,
    }
    
    return total_reward.sum(), reward_components  # Return total and individual rewards
```

### Key Improvements:
- **Speed Reward**: This now uses an exponential function to ensure higher speeds yield significantly higher rewards.
- **Distance Reward**: It rewards the agent for being closer to the target rather than penalizing distance, effectively creating a more informative signal.
- **Balance**: The two components are combined straightforwardly to give the agent clearer and more actionable feedback. This version is expected to guide the agent better to optimize both speed and target reaching effectively.

[2024-10-06 12:07:14,045][root][INFO] - Iteration 2: User Content:
We trained a RL policy using the provided reward function code and tracked the values of the individual components in the reward function as well as global policy metrics such as success rates and episode lengths after every 100 epochs and the maximum, mean, minimum values encountered:
speed_reward: ['782.90', '1146.68', '77.24', '41.65', '114.05', '131.22', '49.22', '71.85', '200.81', '293.62'], Max: 2526.13, Mean: 269.76, Min: 27.58 
distance_reward: ['0.00', '0.00', '0.00', '0.00', '0.00', '0.00', '0.00', '0.00', '0.00', '0.00'], Max: 0.00, Mean: 0.00, Min: 0.00 
task_score: ['-0.05', '0.08', '-0.01', '-0.01', '-0.05', '-0.07', '-0.02', '0.13', '0.04', '0.13'], Max: 0.23, Mean: 0.03, Min: -0.11 
episode_lengths: ['31.92', '112.58', '781.39', '888.51', '889.48', '841.19', '899.55', '934.66', '835.31', '922.25'], Max: 985.23, Mean: 766.58, Min: 25.44 
Please carefully analyze the policy feedback and provide a new, improved reward function that can better solve the task. Some helpful tips for analyzing the policy feedback:
    (1) If the success rates are always near zero, then you must rewrite the entire reward function
    (2) If the values for a certain reward component are near identical throughout, then this means RL is not able to optimize this component as it is written. You may consider
        (a) Changing its scale or the value of its temperature parameter
        (b) Re-writing the reward component 
        (c) Discarding the reward component
    (3) If some reward components' magnitude is significantly larger, then you must re-scale its value to a proper range
Please analyze each existing reward component in the suggested manner above first, and then write the reward function code. The output of the reward function should consist of two items:
    (1) the total reward,
    (2) a dictionary of each individual reward component.
The code output should be formatted as a python code string: "```python ... ```".

Some helpful tips for writing the reward function code:
    (1) You may find it helpful to normalize the reward to a fixed range by applying transformations like torch.exp to the overall reward or its components
    (2) If you choose to transform a reward component, then you must also introduce a temperature parameter inside the transformation function; this parameter must be a named variable in the reward function and it must not be an input variable. Each transformed reward component should have its own temperature variable
    (3) Make sure the type of each input variable is correctly specified; a float input variable should not be specified as torch.Tensor
    (4) Most importantly, the reward code's input variables must contain only attributes of the provided environment class definition (namely, variables that have prefix self.). Under no circumstance can you introduce new input variables.


[2024-10-06 12:07:14,220][root][INFO] - Task: Humanoid, Max Training Success 0.4448356628417969, Correlation 0.5829885898618787, Best Reward Code Path: env_iter1_response3.py
[2024-10-06 12:07:14,221][root][INFO] - Evaluating best reward code 5 times
[2024-10-06 12:53:13,160][tensorboard][INFO] - No path found after /home/vandriel/Documents/GitHub/Eureka/eureka/outputs/eureka/2024-10-06_10-52-49/policy-2024-10-06_12-07-16/runs/HumanoidDS-2024-10-06_12-07-16/summaries/events.out.tfevents.1728209237.Rhino
[2024-10-06 12:53:13,646][tensorboard][INFO] - No path found after /home/vandriel/Documents/GitHub/Eureka/eureka/outputs/eureka/2024-10-06_10-52-49/policy-2024-10-06_12-16-39/runs/HumanoidDS-2024-10-06_12-16-39/summaries/events.out.tfevents.1728209800.Rhino
[2024-10-06 12:53:14,162][tensorboard][INFO] - No path found after /home/vandriel/Documents/GitHub/Eureka/eureka/outputs/eureka/2024-10-06_10-52-49/policy-2024-10-06_12-25-37/runs/HumanoidDS-2024-10-06_12-25-38/summaries/events.out.tfevents.1728210339.Rhino
[2024-10-06 12:53:14,648][tensorboard][INFO] - No path found after /home/vandriel/Documents/GitHub/Eureka/eureka/outputs/eureka/2024-10-06_10-52-49/policy-2024-10-06_12-35-08/runs/HumanoidDS-2024-10-06_12-35-08/summaries/events.out.tfevents.1728210909.Rhino
[2024-10-06 12:53:15,135][tensorboard][INFO] - No path found after /home/vandriel/Documents/GitHub/Eureka/eureka/outputs/eureka/2024-10-06_10-52-49/policy-2024-10-06_12-44-24/runs/HumanoidDS-2024-10-06_12-44-25/summaries/events.out.tfevents.1728211466.Rhino
[2024-10-06 12:53:15,141][root][INFO] - Final Success Mean: 0.19302940368652344, Std: 0.027029761110282567, Raw: [0.14734363555908203, 0.1974945068359375, 0.18121814727783203, 0.21987342834472656, 0.21921730041503906]
[2024-10-06 12:53:15,141][root][INFO] - Final Correlation Mean: 0.6578632024216006, Std: 0.3589577681648911, Raw: [0.914752864057467, 0.49330763213766876, 0.9247265364041712, 0.9340358844551218, 0.022493095053574354]
